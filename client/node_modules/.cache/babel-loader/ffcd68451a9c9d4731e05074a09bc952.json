{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elisa\\\\WebstormProjects\\\\mandatory_do_together - mongoose\\\\client\\\\src\\\\Question.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"@reach/router\";\nimport AnswerQuestion from \"./AnswerQuestion\";\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const question = this.props.getQuestion(this.props.id);\n    /*const list = question.answers.map(ans => <li>{ans.text}\r\n        - ({ans.votes})</li>);*/\n\n    let content = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Loading\");\n\n    if (question) {\n      content = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, question.name), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"Answers\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, question.answers.map(h => React.createElement(\"li\", {\n        key: h,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, h))), React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Back\"));\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, content, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Go back to questions\"));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["C:\\Users\\Elisa\\WebstormProjects\\mandatory_do_together - mongoose\\client\\src\\Question.js"],"names":["React","Component","Link","AnswerQuestion","Question","constructor","props","render","question","getQuestion","id","content","name","answers","map","h"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,eAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAE7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEH;;AACDC,EAAAA,MAAM,GAAG;AACL,UAAMC,QAAQ,GAAG,KAAKF,KAAL,CAAWG,WAAX,CAAuB,KAAKH,KAAL,CAAWI,EAAlC,CAAjB;AAEA;;;AAEA,QAAIC,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAd;;AACA,QAAIH,QAAJ,EAAc;AACVG,MAAAA,OAAO,GACH,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKH,QAAQ,CAACI,IAAd,CADJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKJ,QAAQ,CAACK,OAAT,CAAiBC,GAAjB,CAAqBC,CAAC,IAAI;AAAI,QAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaA,CAAb,CAA1B,CADL,CAJJ,EAQI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,CADJ;AAWH;;AACD,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQKJ,OARL,EAUI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAVJ,CADJ;AAcH;;AAvC4B;;AA0CjC,eAAeP,QAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AnswerQuestion from \"./AnswerQuestion\";\r\nclass Question extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n    render() {\r\n        const question = this.props.getQuestion(this.props.id);\r\n\r\n        /*const list = question.answers.map(ans => <li>{ans.text}\r\n            - ({ans.votes})</li>);*/\r\n        let content = <p>Loading</p>\r\n        if (question) {\r\n            content =\r\n                <React.Fragment>\r\n                    <h1>{question.name}</h1>\r\n\r\n                    <h3>Answers</h3>\r\n                    <ul>\r\n                        {question.answers.map(h => <li key={h}>{h}</li>)}\r\n                    </ul>\r\n\r\n                    <Link to=\"/\">Back</Link>\r\n                </React.Fragment>\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                {/*<h3>Question!</h3>\r\n                <p key={question.id}>{question.name}</p>\r\n\r\n                <ul>\r\n                    {question.answers.length === 0 ? <p>No Answers!</p> : list}\r\n                </ul>\r\n                <AnswerQuestion answerQuestion={(text) => this.props.answerQuestion(text)}></AnswerQuestion>*/}\r\n                {content}\r\n\r\n                <Link to=\"/\">Go back to questions</Link>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;\r\n\r\n"]},"metadata":{},"sourceType":"module"}